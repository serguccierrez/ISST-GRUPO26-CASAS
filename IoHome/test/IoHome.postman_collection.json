{
	"info": {
		"_postman_id": "eae5a514-27c7-49cb-bb61-ce186c302332",
		"name": "IoHome",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43585056"
	},
	"item": [
		{
			"name": "PropietarioController || AuthController",
			"item": [
				{
					"name": "POST registrar prop y user",
					"item": [
						{
							"name": "usuario creado con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Usuario creado correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().nombre).to.eql(\"Capitán\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"usuarioID\", jsonData.id);\r",
											"pm.environment.set(\"usuarioEmail\", jsonData.correoElectronico);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"Capitán\",\r\n  \"apellidos\": \"Alatriste\",\r\n  \"correoElectronico\": \"ejemplo@test.com\",\r\n  \"password\": \"1234\",\r\n  \"telefono\": \"123456789\",\r\n  \"dni\": \"12345678A\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "propietario creado con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"propietario creado correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().nombre).to.eql(\"Lope\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"propietarioID\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"Lope\",\r\n  \"apellidos\": \"De Vega\",\r\n  \"correoElectronico\": \"ejemplo2@test.com\",\r\n  \"password\": \"4321\",\r\n  \"telefono\": \"224456789\",\r\n  \"dni\": \"12355688A\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/propietario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"propietario"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST logIn",
					"item": [
						{
							"name": "logIn de usuario correcto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200: Login exitoso del usuario\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"correoElectronico\": \"ejemplo@test.com\",\r\n  \"password\": \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "logIn de usuario incorecto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 401: Login fallido por contraseña incorrecta\", () => {\r",
											"  pm.response.to.have.status(401);\r",
											"  pm.response.to.have.body(\"Contraseña incorrecta\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"correoElectronico\": \"ejemplo@test.com\",\r\n  \"password\": \"1234567\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "logIn de propietario correcto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200: Login exitoso del propietario\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"correoElectronico\": \"ejemplo2@test.com\",\r\n  \"password\": \"4321\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/propietario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										"propietario"
									]
								}
							},
							"response": []
						},
						{
							"name": "logIn de propietario incorrecto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200: Login exitoso del usuario\", () => {\r",
											"  pm.response.to.have.status(401);\r",
											"   pm.response.to.have.body(\"Credenciales inválidas para propietario\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"correoElectronico\": \"ejemplo@test.com\",\r\n  \"password\": \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login/propietario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login",
										"propietario"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET propietarios y usuarios",
					"item": [
						{
							"name": "obtener todos los usuarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200: Usuarios obtenidos correctamente\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta contiene al menos un usuario\", () => {\r",
											"  const json = pm.response.json();\r",
											"  pm.expect(json.length).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/usuarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "obtener todos los propietarios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200: Propietarios obtenidos correctamente\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta contiene al menos un propietario\", () => {\r",
											"  const json = pm.response.json();\r",
											"  pm.expect(json.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/propietarios",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"propietarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET propietario por id",
					"item": [
						{
							"name": "porpietario con id existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta contiene el usuario de test creado\",  () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"nombre\").equal(\"Lope\");\r",
											"    pm.expect(jsonData).to.have.property(\"correoElectronico\").equal(\"ejemplo2@test.com\");\r",
											"    pm.expect(jsonData).to.have.property(\"rol\").equal(\"ADMIN\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propietarios/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propietarios",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "porpietario con id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No se encuentra un propietario con ese id\",  () => {\r",
											"\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"El cuerpo de la respuesta es tá vacío\",  () => {\r",
											"    pm.expect(pm.response.text()).to.eql('');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propietarios/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propietarios",
										"999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT actualizar propietario",
					"item": [
						{
							"name": "Propietario actualizado con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta contiene los datos actualizados del propietario con ese id\",  () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.nombre).to.eql(\"Lope Félix\");\r",
											"    pm.expect(jsonData.telefono).to.eql(\"000000000\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nombre\": \"Lope Félix\",\r\n  \"apellidos\": \"De Vega\",\r\n  \"correoElectronico\": \"ejemplo2@test.com\",\r\n  \"password\": \"4321\",\r\n  \"telefono\": \"000000000\",\r\n  \"dni\": \"12355688A\",\r\n    \"rol\": \"ADMIN\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/propietarios/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propietarios",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PropiedadController",
			"item": [
				{
					"name": "POST crear propiedad",
					"item": [
						{
							"name": "creada con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Propiedad creada correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json().nombre).to.eql(\"Apartamento Centro\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"propiedadId\", jsonData.id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"Apartamento Centro\",\r\n    \"direccion\": \"Calle Mayor 10\",\r\n    \"ciudad\": \"Madrid\",\r\n    \"cp\": \"28013\",\r\n    \"piso\": \"3B\",\r\n    \"habitaciones\": 2,\r\n    \"banos\": 1,\r\n    \"aireAcondicionado\": true,\r\n    \"cocinaEquipada\": true,\r\n    \"secador\": false,\r\n    \"plancha\": true,\r\n    \"cafetera\": true,\r\n    \"toallasYSabanas\": true,\r\n    \"piscina\": false,\r\n    \"garaje\": false,\r\n    \"normas\": \"No fumar. No mascotas.\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/propiedades/crear/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"crear",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "no creada por propietario inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error al crear propiedad con propietario inexistente\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"Apartamento Centro\",\r\n    \"direccion\": \"Calle Mayor 10\",\r\n    \"ciudad\": \"Madrid\",\r\n    \"cp\": \"28013\",\r\n    \"piso\": \"3B\",\r\n    \"habitaciones\": 2,\r\n    \"banos\": 1,\r\n    \"aireAcondicionado\": true,\r\n    \"cocinaEquipada\": true,\r\n    \"secador\": false,\r\n    \"plancha\": true,\r\n    \"cafetera\": true,\r\n    \"toallasYSabanas\": true,\r\n    \"piscina\": false,\r\n    \"garaje\": false,\r\n    \"normas\": \"No fumar. No mascotas.\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/propiedades/crear/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"crear",
										"999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET obtener porpiedades de un propietario",
					"item": [
						{
							"name": "propietario existente con propiedades",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Lista de propiedades recibida correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propiedades/propietario/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"propietario",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "propietario no existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error al obtener propiedades de propietario inexistente\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propiedades/propietario/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"propietario",
										"999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT actualizar propiedad",
					"item": [
						{
							"name": "actualizada correctamente",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"Apartamento Centro\",\r\n    \"direccion\": \"Calle Mayor 10\",\r\n    \"ciudad\": \"Villanueva del trabuco\",\r\n    \"cp\": \"28013\",\r\n    \"piso\": \"3B\",\r\n    \"habitaciones\": 2,\r\n    \"banos\": 1,\r\n    \"aireAcondicionado\": true,\r\n    \"cocinaEquipada\": true,\r\n    \"secador\": false,\r\n    \"plancha\": true,\r\n    \"cafetera\": true,\r\n    \"toallasYSabanas\": true,\r\n    \"piscina\": false,\r\n    \"garaje\": false,\r\n    \"normas\": \"No fumar. No mascotas.\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/propiedades/actualizar/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"actualizar",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "no existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error al actualizar propiedad inexistente\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nombre\": \"Apartamento Centro\",\r\n    \"direccion\": \"Calle Mayor 10\",\r\n    \"ciudad\": \"Villanueva del trabuco\",\r\n    \"cp\": \"28013\",\r\n    \"piso\": \"3B\",\r\n    \"habitaciones\": 2,\r\n    \"banos\": 1,\r\n    \"aireAcondicionado\": true,\r\n    \"cocinaEquipada\": true,\r\n    \"secador\": false,\r\n    \"plancha\": true,\r\n    \"cafetera\": true,\r\n    \"toallasYSabanas\": true,\r\n    \"piscina\": false,\r\n    \"garaje\": false,\r\n    \"normas\": \"No fumar. No mascotas.\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/propiedades/actualizar/999999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"actualizar",
										"999999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SeamController (CerraduraController)",
			"item": [
				{
					"name": "POST crear cerradura DB",
					"item": [
						{
							"name": "cerradura añadida con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cerradura creada correctamente\",  () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"device_id\").equal;(\"dev_abc123\")\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"usuadeviceIdrioID\", jsonData.iddevice_id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"device_id\": \"dev_abc123\",\r\n  \"nombre\": \"Entrada principal\",\r\n  \"tipo\": \"smartlock\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{base_url}}/seam/device/crear/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"device",
										"crear",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT asignar cerradura a propiedad",
					"item": [
						{
							"name": "link de cerradura con propiedad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Propiedad asignada a la cerradura\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    const json = pm.response.json();\r",
											"\r",
											"    pm.expect(json).to.have.property(\"propiedad\");\r",
											"    pm.expect(json.propiedad).to.not.be.null;\r",
											"    pm.expect(json.propiedad).to.have.property(\"id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/seam/cerradura/dev_abc123/propiedad/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"cerradura",
										"dev_abc123",
										"propiedad",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET obtener cerraduras por Ids",
					"item": [
						{
							"name": "obtener cerradura por id del prop",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cerraduras obtenidas correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const json = pm.response.json();\r",
											"    \r",
											"\r",
											"    pm.expect(json).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    \r",
											"    const primeraCerradura = json[0];\r",
											"    pm.expect(primeraCerradura).to.have.property(\"device_id\", \"dev_abc123\");\r",
											"    pm.expect(primeraCerradura).to.have.property(\"nombre\", \"Entrada principal\");\r",
											"    pm.expect(primeraCerradura).to.have.property(\"tipo\", \"smartlock\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/seam/device/propietario/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"device",
										"propietario",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "obtener cerradura por id del prop Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cerradura obtenida correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const json = pm.response.json();\r",
											"    \r",
											"\r",
											"   \r",
											"    pm.expect(json).to.have.property(\"device_id\", \"dev_abc123\");\r",
											"    pm.expect(json).to.have.property(\"nombre\", \"Entrada principal\");\r",
											"    pm.expect(json).to.have.property(\"tipo\", \"smartlock\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/seam/device/propiedad/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"device",
										"propiedad",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "EventController",
			"item": [
				{
					"name": "POST guardar evento",
					"item": [
						{
							"name": "Evento válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 200 OK al guardar evento válido\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"El cuerpo de la respuesta contiene los datos esperados del evento\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"event_id\", \"test-event-001\");\r",
											"    pm.expect(json).to.have.property(\"cerradura\");\r",
											"    pm.expect(json).to.have.property(\"status\", \"success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "eventId",
											"value": "test-event-001",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "dev_abc123",
											"type": "text"
										},
										{
											"key": "descripcion",
											"value": "Esto es un evento de prueba",
											"type": "text"
										},
										{
											"key": "status",
											"value": "success",
											"type": "text"
										},
										{
											"key": "actionType",
											"value": "OPEN_LOCK",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/eventos/guardar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"guardar"
									]
								}
							},
							"response": []
						},
						{
							"name": "deviceId no válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 404 Not Found al usar un deviceId inexistente\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "eventId",
											"value": "test-event-001",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "dispositivoInvalido",
											"type": "text"
										},
										{
											"key": "descripcion",
											"value": "Esto es un evento de prueba",
											"type": "text"
										},
										{
											"key": "status",
											"value": "success",
											"type": "text"
										},
										{
											"key": "actionType",
											"value": "OPEN_LOCK",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/eventos/guardar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"guardar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Campos vacíos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 400 Bad Request al enviar datos incompletos\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "eventId",
											"value": "test-event-001",
											"type": "text",
											"disabled": true
										},
										{
											"key": "deviceId",
											"value": "78626d11-9557-4d09-9638-0160766059be",
											"type": "text",
											"disabled": true
										},
										{
											"key": "descripcion",
											"value": "Esto es un evento de prueba",
											"type": "text"
										},
										{
											"key": "status",
											"value": "success",
											"type": "text",
											"disabled": true
										},
										{
											"key": "actionType",
											"value": "OPEN_LOCK",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/api/eventos/guardar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"guardar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET eventos por propietario",
					"item": [
						{
							"name": "ownerId válido con eventos existentes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 200 OK al solicitar eventos de un propietario válido\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Se devuelve una lista no vacía de eventos\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.be.an(\"array\").and.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/all/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"all",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ownerId válido sin eventos existentes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 204 No Content cuando el propietario no tiene eventos registrados\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/all/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"all",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "ownerId inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error esperado con ownerId inválido 404 Not found\", () => {\r",
											"    const status = pm.response.code;\r",
											"    pm.expect([400, 404]).to.include(status);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/all/999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"all",
										"999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET eventos por cerradura",
					"item": [
						{
							"name": "cerradura con eventos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 200 OK al solicitar eventos de una cerradura válida\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Se devuelve una lista de eventos\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/78626d11-9557-4d09-9638-0160766059be",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"78626d11-9557-4d09-9638-0160766059be"
									]
								}
							},
							"response": []
						},
						{
							"name": "cerradura sin eventos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 204 No Content cuando la cerradura no tiene eventos\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/7d908173-1a58-4413-91a4-a81aaa6fc566",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"7d908173-1a58-4413-91a4-a81aaa6fc566"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "UsuarioController",
			"item": [
				{
					"name": "GET user por email",
					"item": [
						{
							"name": "usuario encontrado con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Estado 200: Usuario encontrado correctamente\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"El correo devuelto coincide con el buscado\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json.correoElectronico).to.eql(\"ejemplo@test.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/usuarios/correo/{{usuarioEmail}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"usuarios",
										"correo",
										"{{usuarioEmail}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "usuario no encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"❌ Estado 404: Usuario no encontrado\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/usuarios/correo/{{usuarioEmail}}fallo",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"usuarios",
										"correo",
										"{{usuarioEmail}}fallo"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ReservaController",
			"item": [
				{
					"name": "POST crear reserva",
					"item": [
						{
							"name": "Crear una reserva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reserva creada correctamente\",  () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData.activa).to.eql(true);\r",
											"    pm.expect(jsonData.fechaInicio).to.eql(\"2025-05-10 14:00:00\");\r",
											"    pm.expect(jsonData.fechaFin).to.eql(\"2025-05-12 10:00:00\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"reservaId\", jsonData.id);\r",
											"pm.environment.set(\"tokenReserva\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicio\": \"2025-05-10 14:00:00\",\r\n  \"fechaFin\": \"2025-05-12 10:00:00\",\r\n  \"observaciones\": \"Reserva de prueba\",\r\n  \"token\": \"sampleToken\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/reservas/crear/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"crear",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST asociar por token",
					"item": [
						{
							"name": "asociar reserva a un usuario por token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Asociar reserva por token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"    pm.expect(jsonData.token).to.eql(pm.environment.get(\"tokenReserva\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/api/reservas/asociar-por-token/{{usuarioID}}?token={{tokenReserva}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"asociar-por-token",
										"{{usuarioID}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenReserva}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET reservas activas",
					"item": [
						{
							"name": "reservas obtenidas correctamente de un usuario por su id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservas del usuario de test obtenidas con éxito\",  () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reservas/usuario/{{usuarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"usuario",
										"{{usuarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reservas obtenidas correctamente de un propietario por su id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservas del propietario de test obtenidas con éxito\",  () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reservas/usuario/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"usuario",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reservas con éxito de una propiedad",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservas de la propiedad de test obtenidas con éxito\",  () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reservas/propiedad/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"propiedad",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reservas activas con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reservas del usuario de test obtenidas con éxito\",  () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reservas/activas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"activas"
									]
								}
							},
							"response": []
						},
						{
							"name": "reserva por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Obtener reserva por ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"     pm.expect(jsonData.id).to.eql(pm.environment.get(\"reservaId\"));\r",
											"    pm.expect(jsonData).to.have.property(\"fechaInicio\");\r",
											"    pm.expect(jsonData).to.have.property(\"fechaFin\");\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/reservas/{{reservaId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"{{reservaId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Limpieza BBDD",
			"item": [
				{
					"name": "DELETE eventos",
					"item": [
						{
							"name": "eliminación exitosa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 204 No Content al eliminar un evento existente\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/elimina/test-event-001",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"elimina",
										"test-event-001"
									]
								}
							},
							"response": []
						},
						{
							"name": "id no existente de evento",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respuesta 404 Not Found al intentar eliminar un evento inexistente\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/eventos/elimina/test-event-999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"eventos",
										"elimina",
										"test-event-999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE propiedad",
					"item": [
						{
							"name": "eliminación exitosa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Propiedad eliminada correctamente\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propiedades/eliminar/{{propiedadId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propiedades",
										"eliminar",
										"{{propiedadId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE porpietario por id",
					"item": [
						{
							"name": "propietario eliminado correctamente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Propietario eliminado correctamente\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propietarios/{{propietarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propietarios",
										"{{propietarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "propietario eliminado correctamente Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Propietario a eliminar no encontrado\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/propietarios/{{propietarioID}}243567",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"propietarios",
										"{{propietarioID}}243567"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE usuario por id",
					"item": [
						{
							"name": "usuario borrado con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Usuario eliminado correctamente\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/usuarios/{{usuarioID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"usuarios",
										"{{usuarioID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "usuario no borrado error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Usuario para eliminar no encontrado\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/usuarios/{{usuarioID}}67543",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"usuarios",
										"{{usuarioID}}67543"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE reserva",
					"item": [
						{
							"name": "borrar con éxito la reserva-test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reserva de test eliminada correctamente\",  () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fechaInicio\": \"2025-05-10 14:00:00\",\r\n  \"fechaFin\": \"2025-05-12 10:00:00\",\r\n  \"observaciones\": \"Reserva de prueba\",\r\n  \"token\": \"sampleToken\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{base_url}}/api/reservas/eliminar/{{reservaId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"reservas",
										"eliminar",
										"{{reservaId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE cerradura por id",
					"item": [
						{
							"name": "eliminada con éxito",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cerradura de test eliminada\",  () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/seam/device/dev_abc123",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"device",
										"dev_abc123"
									]
								}
							},
							"response": []
						},
						{
							"name": "no eliminada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No se pudo borrar la cerradura porque no existe ninguna con ese id\",  () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/seam/device/dev_abc1232345",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"seam",
										"device",
										"dev_abc1232345"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}